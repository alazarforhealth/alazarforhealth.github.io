#pragma once

#include <cstddef>  // Include to use NULL, otherwise use nullptr
#include <iostream>
#include "node.hpp"

template<class T>
class PQ{
private:
    Node<T> *head;          // the pointer to the front of the list
    Node<T> *tail;          // the pointer to the back of the list
    int count;

public:
    // desc: Inializes a new, empty queue
	PQ();

    // desc:    Adds new data to the queue
    // param:   data The data to add to the list
    // param:   priority The priority assigned to this node
    // returns: void
	void enqueue(T &data, int priority);


    // desc:    Removes the front element form the queue
    // returns: void
	void dequeue(void);   

    // desc:    Removes the value found at the front of the queue
    // returns: The data found at the front of the queue
    T get_front(void); 

    // desc:    Checks if the queue is empty or not
    // returns: true is the queue is empty, false if not
    bool isEmpty(void);

    // desc:    Clears the queue
    // returns: void
    void clear(void);

    // desc:    Returns the number of elements in the queue
    // returns: The number of elements in the queue
    int get_count(void);
};

template<class T>
PQ<T>::PQ()
{
	head = NULL;
    tail = NULL;
    count = 0;
}

template<class T>
void PQ<T>::enqueue(T &data, int priority)
{
    Node<T> *new_node = new Node<T>(data, priority);
    std::cout << "the data: " << new_node->get_data();
    if(head == NULL & tail == NULL){
        head = new_node;
        tail = new_node;
    }
    else{
        tail->set_next(new_node);
        tail = new_node;
        // Node<T> *node = head;
        // new_node->set_next(node);
        // head = new_node;
    }

    ++count;

}

template<class T>
void PQ<T>::dequeue(void)
{
    if(head != NULL){

    Node<T> *prev = NULL;
    Node<T> *node = head;
    Node<T> *next = node->get_next();
    

    Node<T> *min_prev = prev;
    Node<T> *min_node = node;
    Node<T> *min_next = next; 


    while(next != NULL){
        if (node->get_prio() < min_node->get_prio()){
            min_node = node;
            min_prev = prev;
            min_next = next;
        } 
        prev = node;
        node = next;
        next = node->get_next();
        

    }
     if(min_node == head){
         head = min_node->get_next();
     }
     else{
            min_prev->set_next(min_next);
        
     }
    delete min_node;
    --count;
    
    }

}

template<class T>
T  PQ<T>::get_front()
{
    if (head != NULL){
    Node<T> *node = head;
    Node<T> *min_node = head;

        while(node != NULL){
            if (node->get_prio() < min_node->get_prio()){
                
                min_node = node;
            } 
            node = node->get_next();
        }

        if (head == NULL){
                return -1;
        }else{
                return min_node->get_data();
        }
    }
}

template<class T>
bool PQ<T>::isEmpty()
{
    
    return count == 0;
}

template<class T>
void PQ<T>::clear(void)
{
        Node<T> *node = head;
        
        while (node != NULL) {
            Node<T> *nextnode = node->get_next(); // deletes everything?
            delete node;
            
            node = nextnode;
            
        }
    
    head = NULL;
    tail = NULL;
    count = 0;
}


template<class T>
int PQ<T>::get_count(void)
{
    return count;
}
